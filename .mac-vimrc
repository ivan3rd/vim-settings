runtime! plugin/sensible.vim

set exrc
set norelativenumber
set nu
set relativenumber
set hidden
set noerrorbells
set smartindent
set ignorecase
set smartcase
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set colorcolumn=80
set viminfo='25,\"50,n~/.viminfo
autocmd FileType html setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType css setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType javascript setlocal tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType typescript setlocal tabstop=4 shiftwidth=4 softtabstop=4
set hlsearch
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
set incsearch
set scrolloff=8
set signcolumn=yes
set hidden
set laststatus=2
" sane text files
set fileformat=unix
set encoding=utf-8
set fileencoding=utf-8
" code folding
set foldmethod=indent
set foldlevel=99
set nowrap

syntax on

set nocp
if version >= 600
    filetype plugin indent on
endif
autocmd VimEnter * NERDTreeTabsToggle
autocmd VimEnter * wincmd p
"autocmd VimEnter * NERDTree | wincmd p
let g:closetag_filenames = '*.vue,*.html,*.xhtml,*.phtml'

call plug#begin('~/.vim/plugged')

Plug 'itchyny/lightline.vim'
Plug 'gruvbox-community/gruvbox'

Plug 'tpope/vim-sensible'
Plug 'dense-analysis/ale'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
" vue-plugin.
Plug 'posva/vim-vue'
"Plug 'leafOfTree/vim-vue-plugin'
"Plug 'ap/vim-buftabline' даёт возможность использовать бафферы как табы.
"Может быть со временем я и стану использовать бафферы чаще чем табы, а пока
"нет
Plug 'preservim/nerdtree'
Plug 'preservim/nerdcommenter'
Plug 'airblade/vim-gitgutter'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'alvan/vim-closetag'
" У плагина выше ^ не работает почему-то автозакрытие тегов. Может быть
" происходит конфликт с YouCompleteMe?
Plug 'Raimondi/delimitMate'
Plug 'AndrewRadev/switch.vim'
"Plug 'jiangmiao/auto-pairs'
Plug 'valsorym/.del.vim-tagbar'
Plug 'ycm-core/YouCompleteMe'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'lyokha/vim-xkbswitch'

call plug#end()

colorscheme gruvbox
let mapleader = "z"

inoremap <c-k> <up>
inoremap <c-j> <down>
"inoremap <C-H> <Nop>
"inoremap <C-H> <left> так же была забайнджена в after/delimitMate для разрешения кофликта
inoremap <c-l> <right>
vnoremap <c-k> <up>
vnoremap <c-j> <down>
vnoremap <c-h> <left>
vnoremap <c-l> <right>
nnoremap <Leader>f yiw:Ag <c-r>"<CR>
"nnoremap <Leader>F yiw:Ag <c-r>"<CR>
nnoremap <Leader>b yiw ?<c-r>"<CR>
" Следующие две команды должны скопиравать html тег и вставить его
" закрывающую версию на новой строке
nnoremap <Leader>n <Esc>yi<
nnoremap <Leader>m i</><Esc>lp
nnoremap <Leader>o :pu_<CR>
"n</oright>/ / map <c-/> p b i / <Esc>
" Следующие две команды дают переключение между вкладками vim
map <F5> :tabp <CR>
map <F6> :tabn <CR>
nnoremap <C-N> :bnext<CR>
nnoremap <C-P> :bprev<CR>

" Вставляем пустые строки в нормальном режиме

" indent/unindent with tab/shift-tab
nmap <Leader><Tab> >>
nmap <S-tab> <<
imap <S-Tab> <Esc><<i
vmap <Tab> >gv
vmap <S-Tab> <gv
" move through split windows
nmap <leader><Up> :wincmd k<CR>
nmap <leader><Down> :wincmd j<CR>
nmap <leader><Left> :wincmd h<CR>
nmap <leader><Right> :wincmd l<CR>

" Следующие строки ребайндяд комбинации клавиш установленные плагинами
map <Leader>/ <plug>NERDCommenterInvert
nmap <Leader>t :TagbarToggle<CR>
nmap <Leader>b :Buffers<CR>

let g:delimitMate_expand_cr = 2
let g:delimitMate_expand_space = 1
au FileType vue let b:delimitMate_matchpairs = "(:),{:},[:]"

" XkbSwitch
let g:XkbSwitchEnabled = 1
let g:XkbSwitchLib = '/usr/local/lib/libxkbswitch.dylib'
let g:XkbSwitchIMappings = ['ru']
let g:XkbSwitchNLayout = 'us'
set keymap=russian-jcukenwin

" switch.vim
let g:switch_custom_definitions = [
\       switch#NormalizedCase(['from', 'to'])
\   ]

" ale
map <leader>e <Plug>(ale_next_wrap)
map <leader>r <Plug>(ale_previous_wrap)
let g:ale_linters = {'python': ['flake8']}
let g:ale_fixers = {
\    'python': ['black']
\   }

" YouCompleteMe
set completeopt-=preview

" lsp for YouCompleteMe
source /Users/user/Documents/programming/lsp-examples-master/vimrc.generated
"let g:ycm_language_server =
"\[
"\    {
"\        'name': 'vue',
"\        'project_root_files': ['src/App.vue', 'App.vue'],
"\        'filletiypes': ['vue'],
"\    },
"\]


" saving files
nmap <Leader>s :wa<CR>

" saveing session
"function! MakeSession()
  "let b:sessiondir = $HOME . "/.vim/sessions" . getcwd()
  "if(argc() == 0)
        "au VimEnter * nested :call LoadSession()
  "endif
  "if (filewritable(b:sessiondir) != 2)
    "exe 'silent !mkdir -p ' b:sessiondir
    "redraw!
  "endif
  "let b:filename = b:sessiondir . '/session.vim'
  "exe "mksession! " . b:filename
"endfunction

"function! LoadSession()
  "let b:sessiondir = $HOME . "/.vim/sessions" . getcwd()
  "let b:sessionfile = b:sessiondir . "/session.vim"
  "if (filereadable(b:sessionfile))
    "exe 'source ' b:sessionfile
  "else
    "echo "No session loaded."
  "endif
"endfunction

" Adding automatons for when entering or leaving Vim
"au VimEnter * nested :call LoadSession()
"au VimLeave * :call MakeSession()

" options for builtin saving sessions
set ssop-=options " do not store global and local values in a session
set ssop-=folds " do not store folds

" restore place in file from previous session
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" WHITESPACES and how to deal with them
" Ctrl-j/k deletes blank line below/above, and Alt-j/k inserts.
nnoremap <silent><C-j> m`:silent +g/\m^\s*$/d<CR>``:noh<CR>
nnoremap <silent><C-k> m`:silent -g/\m^\s*$/d<CR>``:noh<CR>
nnoremap <silent><S-j> :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <silent><S-k> :set paste<CR>m`O<Esc>``:set nopaste<CR>

fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

augroup THE_PRIMEAGEN
    autocmd!
    autocmd BufWritePre * :call TrimWhitespace()
augroup END

" Do not remove indent on new empty line (negates work of delimitMate)
":inoremap <CR> <CR>x<BS>

" wrap toggle
setlocal nowrap
noremap <silent> <Leader>w :call ToggleWrap()<CR>
function ToggleWrap()
    if &wrap
        echo "Wrap OFF"
        setlocal nowrap
        set virtualedit=all
        silent! nunmap <buffer> <Up>
        silent! nunmap <buffer> <Down>
        silent! nunmap <buffer> <Home>
        silent! nunmap <buffer> <End>
        silent! iunmap <buffer> <Up>
        silent! iunmap <buffer> <Down>
        silent! iunmap <buffer> <Home>
        silent! iunmap <buffer> <End>
    else
        echo "Wrap ON"
        setlocal wrap linebreak nolist
        set virtualedit=
        setlocal display+=lastline
        noremap  <buffer> <silent> <Up>   gk
        noremap  <buffer> <silent> <Down> gj
        noremap  <buffer> <silent> <Home> g<Home>
        noremap  <buffer> <silent> <End>  g<End>
        inoremap <buffer> <silent> <Up>   <C-o>gk
        inoremap <buffer> <silent> <Down> <C-o>gj
        inoremap <buffer> <silent> <Home> <C-o>g<Home>
        inoremap <buffer> <silent> <End>  <C-o>g<End>
    endif
endfunction

" Delete buffer while keeping window layout (don't close buffer's windows).
" Version 2008-11-18 from http://vim.wikia.com/wiki/VimTip165
if v:version < 700 || exists('loaded_bclose') || &cp
  finish
endif
let loaded_bclose = 1
if !exists('bclose_multiple')
  let bclose_multiple = 1
endif

" Display an error message.
function! s:Warn(msg)
  echohl ErrorMsg
  echomsg a:msg
  echohl NONE
endfunction

" Command ':Bclose' executes ':bd' to delete buffer in current window.
" The window will show the alternate buffer (Ctrl-^) if it exists,
" or the previous buffer (:bp), or a blank buffer if no previous.
" Command ':Bclose!' is the same, but executes ':bd!' (discard changes).
" An optional argument can specify which buffer to close (name or number).
function! s:Bclose(bang, buffer)
  if empty(a:buffer)
    let btarget = bufnr('%')
  elseif a:buffer =~ '^\d\+$'
    let btarget = bufnr(str2nr(a:buffer))
  else
    let btarget = bufnr(a:buffer)
  endif
  if btarget < 0
    call s:Warn('No matching buffer for '.a:buffer)
    return
  endif
  if empty(a:bang) && getbufvar(btarget, '&modified')
    call s:Warn('No write since last change for buffer '.btarget.' (use :Bclose!)')
    return
  endif
  " Numbers of windows that view target buffer which we will delete.
  let wnums = filter(range(1, winnr('$')), 'winbufnr(v:val) == btarget')
  if !g:bclose_multiple && len(wnums) > 1
    call s:Warn('Buffer is in multiple windows (use ":let bclose_multiple=1")')
    return
  endif
  let wcurrent = winnr()
  for w in wnums
    execute w.'wincmd w'
    let prevbuf = bufnr('#')
    if prevbuf > 0 && buflisted(prevbuf) && prevbuf != btarget
      buffer #
    else
      bprevious
    endif
    if btarget == bufnr('%')
      " Numbers of listed buffers which are not the target to be deleted.
      let blisted = filter(range(1, bufnr('$')), 'buflisted(v:val) && v:val != btarget')
      " Listed, not target, and not displayed.
      let bhidden = filter(copy(blisted), 'bufwinnr(v:val) < 0')
      " Take the first buffer, if any (could be more intelligent).
      let bjump = (bhidden + blisted + [-1])[0]
      if bjump > 0
        execute 'buffer '.bjump
      else
        execute 'enew'.a:bang
      endif
    endif
  endfor
  execute 'bdelete'.a:bang.' '.btarget
  execute wcurrent.'wincmd w'
endfunction
command! -bang -complete=buffer -nargs=? Bclose call <SID>Bclose(<q-bang>, <q-args>)
nnoremap <silent> <Leader>d :Bclose<CR>
